{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","src","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","sortByOptions","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","onChange","placeholder","Yelp","search","url","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0928efa5.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n  render() {\n    const { business } = this.props;\n    return (\n      <div className=\"Business\">\n        <div className=\"image-container\">\n          <img src={business.imageSrc} alt=\"\" />\n        </div>\n        <h2>{business.name}</h2>\n        <div className=\"Business-information\">\n          <div className=\"Business-address\">\n            <p>{business.address}</p>\n            <p>{business.city}</p>\n            <p>\n              {business.state} {business.zipCode}\n            </p>\n          </div>\n          <div className=\"Business-reviews\">\n            <h3>{business.category}</h3>\n            <h3 className=\"rating\">{business.rating} stars</h3>\n            <p>{business.reviewCount} reviews</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Business;\n","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n  render() {\n    return (\n      <div className=\"BusinessList\">\n        {this.props.businesses.map((business) => {\n          return <Business key={business.id} business={business} />;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default BusinessList;\n","import React from 'react';\nimport './SearchBar.css';\n\n// Dynamically create the list items needed to diplay\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: '',\n      location: '',\n      sortBy: 'best_match',\n    };\n    this.sortByOptions = {\n      'Best Match': 'best_match',\n      'Highest Rated': 'rating',\n      'Most Reviewed': 'review_count',\n    };\n    // Bind methods in the constructors\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  // Get a sort option's class\n  getSortByClass(sortByOption) {\n    if (this.state.sortBy === sortByOption) {\n      return 'active';\n    } else {\n      return '';\n    }\n  }\n\n  // Handle a change in sort option\n  handleSortByChange(sortByOption) {\n    this.setState({\n      sortBy: sortByOption,\n    });\n  }\n\n  // Handle a change in term\n  handleTermChange(event) {\n    this.setState({\n      term: event.target.value,\n    });\n  }\n\n  // Handle a change in location\n  handleLocationChange(event) {\n    this.setState({\n      location: event.target.value,\n    });\n  }\n\n  // Handle a search\n  handleSearch(event) {\n    this.props.searchYelp(\n      this.state.term,\n      this.state.location,\n      this.state.sortBy\n    );\n    event.preventDefault();\n  }\n\n  // Render Sort By Options\n  renderSortByOptions() {\n    return Object.keys(this.sortByOptions).map((sortByOption) => {\n      let sortByOptionValue = this.sortByOptions[sortByOption];\n      return (\n        <li\n          className={this.getSortByClass(sortByOptionValue)}\n          key={sortByOptionValue}\n          onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\n        >\n          {sortByOption}\n        </li>\n      );\n    });\n  }\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <div className=\"SearchBar-sort-options\">\n          <ul>{this.renderSortByOptions()}</ul>\n        </div>\n        <div className=\"SearchBar-fields\">\n          <input\n            onChange={this.handleTermChange}\n            placeholder=\"Search Businesses\"\n          />\n          <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\n        </div>\n        <div className=\"SearchBar-submit\" onClick={this.handleSearch}>\n          <a>Let's Go</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","// Credential\nconst apiKey =\n  'i4Due_YmEmhrBbslgfYtw6OyWaDhtDYjs0R9m-ZIBthJGQAQkyMeTkjw05u7iV1GQ65B676iQt4_0fSbSJc3ICesfLnEcbGzcnTNn-kI1CL2htrPBbhdaW86K1enXnYx';\n\n// Yelp Module\nconst Yelp = {\n  search(term, location, sortBy) {\n    let url = `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`;\n    return fetch(url, {\n      headers: { Authorization: `Bearer ${apiKey}` },\n    })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        if (jsonResponse.businesses) {\n          return jsonResponse.businesses.map((business) => {\n            console.log(business);\n            return {\n              id: business.id,\n              imageSrc: business.image_url,\n              name: business.name,\n              address: business.location.address1,\n              city: business.location.city,\n              state: business.location.state,\n              zipCode: business.location.zip_code,\n              category: business.categories[0].title,\n              rating: business.rating,\n              reviewCount: business.review_count,\n            };\n          });\n        }\n      });\n  },\n};\n\nexport default Yelp;\n","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { businesses: [] };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  // Search Yelp\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then((businesses) =>\n      this.setState({\n        businesses: businesses,\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}